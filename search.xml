<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[tomcat-load-jsp]]></title>
      <url>%2F2017%2F03%2F30%2Ftomcat-load-jsp%2F</url>
      <content type="text"><![CDATA[tomcat解决加载JSP文件过大错误标签（tomcat jsp ）： tomcat当遇到多个Jsp include一起的时候加载时遇到如下错误：Error：SEVERE: Servlet.service() for servlet jsp threw exception org.apache.jasper.JasperException: Unable to compile class for JSP: An error occurred at line: [136] in the generated java file: **** The code of method _jspService(HttpServletRequest, HttpServletResponse) is exceeding the 65535 bytes limit 解决：1.修改tomcat配置：打开tomcat路径—conf—web.xml。2.直接搜索关键字‘xpoweredBy’再加一个init-param初始化参数配置如下：&lt;servlet&gt; &lt;servlet-name&gt;jsp&lt;/servlet-name&gt; &lt;servlet-class&gt;org.apache.jasper.servlet.JspServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;genStrAsCharArray&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;mappedfile&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;development&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;fork&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;xpoweredBy&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;3&lt;/load-on-startup&gt; &lt;/servlet&gt; 3.保存退出，删除eclipse中的tomcat配置重新添加即可。4.注意大小写mappedfile]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[liferay-quartz]]></title>
      <url>%2F2017%2F03%2F30%2Fliferay-quartz%2F</url>
      <content type="text"><![CDATA[Liferay Quartz标签（liferay quartz）： liferayliferay 定时任务的Listener12345678&lt;scheduler-entry&gt; &lt;scheduler-event-listener-class&gt;com.*.quartz.ClearEmailStorageMessageListener&lt;/scheduler-event-listener-class&gt; &lt;trigger&gt; &lt;cron&gt; &lt;cron-trigger-value&gt;0 0 23 * * ?&lt;/cron-trigger-value&gt; &lt;/cron&gt; &lt;/trigger&gt; &lt;/scheduler-entry&gt;表达式 含义“0 0 12 ?” 每天中午十二点触发“0 15 10 ? “ 每天早上10：15触发“0 15 10 ?” 每天早上10：15触发“0 15 10 ? “ 每天早上10：15触发“0 15 10 ? 2005” 2005年的每天早上10：15触发“0 14 ?” 每天从下午2点开始到2点59分每分钟一次触发“0 0/5 14 ?” 每天从下午2点开始到2：55分结束每5分钟一次触发“0 0/5 14,18 ?” 每天的下午2点至2：55和6点至6点55分两个时间段内每5分钟一次触发“0 0-5 14 ?” 每天14:00至14:05每分钟一次触发“0 10,44 14 ? 3 WED” 三月的每周三的14：10和14：44触发“0 15 10 ? MON-FRI” 每个周一、周二、周三、周四、周五的10：15触发“0 15 10 15 ?” 每月15号的10：15触发“0 15 10 L * ?” 每月的最后一天的10：15触发]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[liferay_searching]]></title>
      <url>%2F2017%2F03%2F01%2Fliferay-searching%2F</url>
      <content type="text"><![CDATA[Searching in Liferay 6.2标签（liferay,search）： liferay,searchliferay search 底层是基于lucene进行关键字搜索,在企业开发我们都会选择solr集成。通常客户在查询content时，不需要显示出过多的content（因为默认的分词是或者的关系）,这个时候我们一般需要更精确的搜所：&quot;liferay&quot; AND &quot;kaleo workflow&quot;这样我们就会查询既包含liferay的关键字也包含kaleo workflow的关键字的content。12345678910111213BooleanQuery keyWordsQuery = BooleanQueryFactoryUtil.create(searchContext); keyWords=escapeQueryCharsAnd(keyWords); String[] keyarr=keyWords.split(" "); StringBuilder sb = new StringBuilder(); int i=0; for(String keyword:keyarr)&#123; keyword="\""+keyword+"\""; sb.append(keyword); if(i&lt;keyarr.length-1)&#123; sb.append(" AND "); &#125; i++;&#125;这个escapeQueryCharsAnd方法的实现：123456789101112131415public String escapeQueryChars(String s) &#123; StringBuilder sb = new StringBuilder(); for (int i = 0; i &lt; s.length(); i++) &#123; char c = s.charAt(i); // These characters are part of the query syntax and must be escaped if (c == '\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'|| c == '^' || c == '[' || c == ']' || c == '\"' || c == '&#123;' || c == '&#125;' || c == '~'|| c == '*' || c == '?' || c == '|' || c == '&amp;' || c == ';' || c == '/'|| Character.isWhitespace(c)) &#123; sb.append('\\'); &#125; sb.append(c); &#125; return sb.toString(); &#125;]]></content>
    </entry>

    
  
  
</search>
